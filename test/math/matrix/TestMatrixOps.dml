
ignore = test_mequals()
ignore = test_mcols()
ignore = test_mrows()
ignore = test_msetcols()
ignore = test_msetrows()
ignore = test_mdot()

test_mequals = function() return() {
  
  print("running test_mequals")
  M1=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  M2=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  M3=matrix("1 2 3 4 5 6 7  8 9 10", rows=5, cols=2)
  M4=matrix("10 2 3 4 5 6 7  8 9 10", rows=5, cols=2)

  res12 = mequals(M1, M2)
  if (res12 != 1) {
    stop("failed M1 == M2")
  }

  res23 = mequals(M2, M3)
  if (res23 != 0) {
    stop("failed M2 != M3")
  }

  res34 = mequals(M3, M4)
  if (res34 != 0) {
    stop("failed M3 != M4")
  }
  print("mequals test passed")
  print("____________________________")
}

test_mcols2 = function() return () {
  print("running test_mcols")
  M=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)

  # mcols test
  C=matrix("2 4", rows=2, cols=1)

  N = mcols(M, C)
  ignore=printm("M_N", N)

  N_exp = matrix("2 4 7 9", rows=2, cols=2)
  ignore=printm("M_N_exp", N_exp)

  isequal = mequals(N, N_exp)
  if (isequal) {
    print("mcols passed")
  } else {
    stop("mcols failed")
  }
  print("____________________________")
}

test_mcols = function() return() 
{
  print("running test_mcols")
  M=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  
  #case 1
  C=matrix("2 4", rows=2, cols=1)
  N_exp = matrix("2 4 7 9", rows=2, cols=2)
  ignore=test_mcols_impl(M, C, N_exp)
  print("____________________________")
  
  #case 2
  C=matrix("4", rows=1, cols=1)
  N_exp = matrix("4 9", rows=2, cols=1)
  ignore=test_mcols_impl(M, C, N_exp)
  print("____________________________")

  #case 3
  C=matrix("2 4 5", rows=3, cols=1)
  N_exp = matrix("2 4 5 7 9 10", rows=2, cols=3)
  ignore=test_mcols_impl(M, C, N_exp)
  print("____________________________")

  #case 4
  C=matrix("1 2 3 4 5", rows=5, cols=1)
  N_exp = matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  ignore=test_mcols_impl(M, C, N_exp)
  print("____________________________")

  print("============================") 
}

test_mcols_impl = function(
  matrix[double] M,
  matrix[double] C,
  matrix[double] N_exp
) return () {
  print("running test_mcols")
  ignore=printm("M_M", M)
  # mcols test
  ignore=printm("M_C", C)

  N = mcols(M, C)
  ignore=printm("M_N", N)
  
  ignore=printm("M_N_exp", N_exp)
  isequal = mequals(N, N_exp)
  if (isequal) {
    print("mcols passed")
  } else {
    stop("mcols failed")
  }
}


test_mrows = function() return () {
  print("running test_mrows")
  # mrows test
  M=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  R=matrix("1", rows=1, cols=1)

  P = mrows(M, R)
  ignore=printm("M_P", P)

  P_exp = matrix("1 2 3 4 5", rows=1, cols=5)
  ignore=printm("M_P_exp", P_exp)

  isequal = mequals(P, P_exp)
  if (isequal) {
    print("mrows passed")
  } else {
    stop("mrows failed")
  }
  print("____________________________")
}

test_msetcols = function() return () {
  print("running test_mcols")
  M=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  N=matrix("20 30 40 60", rows=2, cols=2)
  # mcols test
  C=matrix("2 4", rows=2, cols=1)

  MN = msetcols(M, N, C)
  ignore=printm("M_MN", MN)

  MN_exp = matrix("1 20 3 30 5 6 40  8 60 10", rows=2, cols=5)
  ignore=printm("M_MN_exp", MN_exp)

  isequal = mequals(MN, MN_exp)
  if (isequal) {
    print("msetcols passed")
  } else {
    stop("msetcols failed")
  }
  print("____________________________")
}


test_msetrows = function() return () {
  print("running test_msetrows")
  M=matrix("1 2 3 4 5 6 7  8 9 10", rows=2, cols=5)
  N=matrix("20 30 40 60 100", rows=1, cols=5)
  # mcols test
  C=matrix("1", rows=1, cols=1)

  MN = msetrows(M, N, C)
  ignore=printm("M_MN", MN)

  MN_exp = matrix("20 30 40 60 100 6 7 8 9 10", rows=2, cols=5)
  ignore=printm("M_MN_exp", MN_exp)

  isequal = mequals(MN, MN_exp)
  if (isequal) {
    print("msetcols passed")
  } else {
    stop("msetcols failed")
  }
  print("____________________________")
}


test_maligncols = function() return () {
  print("running test_maligncols")
  # case 1
  M=matrix("20 30 40 60", rows=2, cols=2)
  C=matrix("2 4", rows=2, cols=1)
  SM_exp = matrix("0 20 0 30 0 0 40 0 60 0", rows=2, cols=5)
  maxCols = 5
  ignore=test_maligncols_impl(M, C, maxCols, SM_exp)

  # case 2
  M=matrix("20 30 100 40 60 120", rows=2, cols=3)
  C=matrix("2 4 5", rows=3, cols=1)
  SM_exp = matrix("0 20 0 30 100 0 40 0 60 120", rows=2, cols=5)
  maxCols = 5
  ignore=test_maligncols_impl(M, C, maxCols, SM_exp)

  print("=============================")
}

test_maligncols_impl = function(
  matrix[double] M,
  matrix[double] C,
  int maxCols,
  matrix[double] SM_exp
) return ()
{
  print("running test_maligncols_impl")
  ignore=printm("M_M", M)
  # mcols test
  ignore=printm("M_C", C)

  SM = maligncols(M, C, maxCols, "cols")
  ignore=printm("M_MN", SM)

  ignore=printm("M_SM_exp", SM_exp)

  isequal = mequals(SM, SM_exp)
  if (isequal) {
    print("maligncols passed")
  } else {
    stop("maligncols failed")
  }
  print("____________________________")
}

#@description: test code for matrix dot products
test_mdot = function() return () {
  print("running test_mdot")

  expElogthetad = matrix("0.38122031  0.32534496", rows=2, cols=1)
  ignore=printm("M_expElogthetad", expElogthetad)

  expElogbetad = matrix("0.11654062  0.13499789  0.10653695  0.12223767  0.14378144 0.15303758  0.10944634  0.12849357  0.09510771  0.12477721", rows=2, cols=5)
  ignore=printm("M_expElogbetad", expElogbetad)

  phinorm = mdot(expElogthetad, expElogbetad)
  ignore=printm("M_phinorm", phinorm)

  phinorm_exp = matrix("0.09421765662758899 0.08707175258459231 0.0824187844973617 0.0775422965567193 0.09540804152540801", rows=1, cols=5)

  isequal = mequals(phinorm, phinorm_exp)
  if (isequal) {
    print("passed test_mdot")
  } else {
    print("failed test_mdot")
  }
  print("____________________________")
}


#include "math/matrix/MatrixOps.dml"
#include "io/io.dml"
