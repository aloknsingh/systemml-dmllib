X1 = matrix("1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", rows=3, cols=5)
X2 = matrix("1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", rows=3, cols=5)
M = matrix("2 4 5", rows=3, cols=1)
A = seq(1, 3, 1)
#A = matrix("1 1", rows=2, cols=1)
#A = matrix("1", rows=1, cols=1)

ignore = printm("M_A", A)

T = table(A, M)


#T=table (seq (1, nrow(M), 1), M, nrow(M), max(M)) 
T=table (seq (1, nrow(M), 1), M, nrow(M), 10)
#T=table (seq (1, nrow(M), 1), M, nrow(M), max(M))
#T = table(A, M, 6, 6)

T1 = T[,2]

ignore = printm("M_T", T)
ignore = printm("M_T1", T1)
ST = t(T1) %*% X2
ignore = printm("M_X", X2)
ignore = printm("M_ST", ST)
/*
*/

#include "io/io.dml"
#dmlpp autogenerated BEGIN including '#include "io/io.dml"'

#print the matrixs
printm_raw = function(matrix[double] M) return (matrix[double] M) {
  if (nrow(M)*ncol(M) >= 100*100) {
     stop("print_raw => Matrix is too big to print in stdout! Aborting ... s")
  }
  for (i in 1:nrow(M)) {
    for (j in 1:ncol(M)) {
       e = as.scalar(M[i,j])
       print(" " + i + " " + j + " " + e)
    }
  }
  M = M
}

printm = function(string name, matrix[double] M) return (matrix[double] M) {
  print("printing matrix = " + name)
  ignore = printm_raw(M)
  print("done printing matrix = " + name)
  M = M
}
#dmlpp autogenerated END including '#include "io/io.dml"'
