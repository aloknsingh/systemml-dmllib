/*
Assumptions: 
 - The inputs xs are monotonically increasing, 
 - there is no duplicates points in x

Algorithms: It implement the https://en.wikipedia.org/wiki/Spline_interpolation#Algorithm_to_find_the_interpolating_cubic_spline
it usages natural spline with q1''(x0) == qn''(xn) == 0.0

Enhancemnets: 
 - since solve use the ||Ax-b|| least sq . the better way would be guassian elimination or the tri-diagonal matrix
 - use the parFor along with the parallel tri-diagonal matrix solver

*/

#
# trunc the matrix by the specified amount in the specified direction. 
# The shifted cells are discarded, the matrix is smaller in size
# 
trunc = function (
  matrix[double] X, # nxm matrix
  int by, # shift amount
  String dir # currently only 'up' is supported. but should handle 'up', 'down', 'left', 'right'
) return (matrix[double] Y) # Y is 
{
    r = nrow(X); c = ncol(X);
    if (by > r) {
      stop("can't pop matrix more than number of rows")
    } 
    Y = matrix(0.0, r-by, c)

    if (r != by ) {
      if (dir == "up") {
        Y[1:r-by,] = X[1+by:r,]
      } else if (dir == "down") {
        Y[1:r-by,] = X[1:r-by,]
      } else {
        stop("trunc unsupported direction " + dir)
      }
    }
}

# resize (only grow and not truncate) the matrix by the specified amount in the specified direction
resize = function(
  matrix[double] X, #nxm matrix
  int rby, # row resize count
  int cby,  # col resize count
  String dir
) return (matrix[double] Y) # Y is 
{
   r = nrow(X); c = ncol(X);
   rn = r + rby; cn = c + cby;
   Y = matrix(0.0, rn, cn)
   if (dir == "tr") { # top right
     Y[1+rby:rn, 1:c] = X
   } else if (dir == "bl") {
     Y[1:r, 1+cby:cn] = X
   } else if (dir == "tl") {
     Y[1+rby:rn, 1+cby:cn ] = X
   } else if (dir == "br") {
     Y[1:r, 1:c] = X
   } else {
     stop("Unknown direction dir => " + dir)
   }
}

calcKnotsDerivKs = function (matrix[double] X, matrix[double] Y) return (matrix[double] K) {
 
  nx = nrow(X)
  ny = nrow(Y)
  if (nx != ny) {
      stop("X and Y vectors are of different size")
  }

  Xu = trunc(X, 1, "up") # Xu is (X where X[0] is removed)
  Xd = trunc(X, 1, "down") # Xd is (X where X[n] is removed)

  Bx=1/(Xu-Xd) # The expr => 1/Delta(X(i) = 1/(X(i)-X(i-1))


  Bxd = resize(Bx, 1, 0, "tr") # Bxd is (0, Bx) vector
  Bxu = resize(Bx, 1, 0, "br") # Bxu is (Bx, 0) vector
  Dx = 2*(Bxd + Bxu) # the major diagonal entry 2(1/Delta(X(i) + 1/Delta(X(i+1)))

  MDx = diag(Dx) # convert vector to diagonal matrix

  MBx = diag(Bx) # this is the temp diagonal matrix, which will form the bands of the tri-diagonal matrix
  MUx = resize(MBx, 1, 1, "bl") # the upper diagonal matrix of the band
  MLx = resize(MBx, 1, 1, "tr") # the lower diagonal matrix of the band

  A=MUx+MDx+MLx # create the complete tri-diagonal matrix 

  #calculate b matrix
  Yu = trunc(Y, 1, "up") # Yu is (Y where Y[0] is removed)
  Yd = trunc(Y, 1, "down") # Yd is (Y where Y[n] is removed)
  By=(Yu-Yd)/(Bx*Bx) # the expr => Delta(Y(i))/Delta(X(i))*Delta(X(i))

  By1=resize(By, 1, 0, "tr") # By1 is (0, By) vector
  By2=resize(By, 1, 0, "br") # By2 is (By, 0) vector
  b=3*(By1+By2) # the b entries 3*(Delta(Y(i))/Delta(X(i))*Delta(X(i)) + Delta(Y(i+1))/Delta(X(i+1))*Delta(X(i+1)))


  K = solve(A, b)  /* solve Ax = b for x vector and assign it to K*/
  
}


/*
 *  given X<nx1> and corresponding Y<nx1> values for the function. where each (xi,yi) represents a knot.
 * it calculates the first derivates i.e k of the interpolated polynomial 
 */
calcKnotsDerivKs_old = function (matrix[double] X, matrix[double] Y) return (matrix[double] K) {
    nx = nrow(X)
    ny = nrow(Y)
    if (nx != ny) {
      stop("X and Y vectors are of different size")
    }
    n = nx
    A = matrix(0.0, n, n)
    b = matrix(0.0, n, 1)

    for (i in 2:n-1) {
      A[i,i-1] = 1/(X[i, 1] - X[i-1, 1])
      A[i,i] = 2 * (1/(X[i, 1] - X[i-1, 1]) + 1/(X[i+1, 1] - X[i, 1]))
      A[i,i+1] = 1/(X[i+1, 1] - X[i, 1])
      b[i,1] = 3* ( (Y[i, 1] - Y[i-1, 1])/((X[i, 1] - X[i-1, 1])*(X[i, 1] - X[i-1, 1])) + (Y[i+1, 1] - Y[i, 1])/((X[i+1, 1] - X[i, 1])*(X[i+1, 1] - X[i, 1])) )
    }

    A[1, 1] = 2/(X[2,1] - X[1,1])
    A[1, 2] = 1/(X[2,1] - X[1,1])
    b[1, 1] = 3* (Y[2, 1] - Y[1, 1]) / ((X[2,1] - X[1,1])*(X[2,1] - X[1,1]))
    
    A[n, n-1] = 1/(X[n,1] - X[n-1,1])
    A[n, n] = 2/(X[n,1] - X[n-1,1])
    b[n, 1] = 3*(Y[n, 1] - Y[n-1, 1]) / ((X[n,1] - X[n-1,1])*(X[n,1] - X[n-1,1]))

    K = solve(A, b)  /* solve Ax = b for x vector and assign it to K*/

}

/*
 * given the X<nx1> and Y<nx1> n sample points and K (the first derivative of the interp polynomial), it calculate the 
 *   y for the given x using the cubic spline interpolation
 */
interpSpline_old = function(double x, matrix[double] X, matrix[double] Y, matrix[double] K) return (double q) {

  /* first find the right knots for interpolation */
  i = 1
  while(as.scalar(X[i,1]) < x) { /* @NOTE: may be better to do the binary search here*/
    i = i+1
  }

  /* calc the y as per the algo docs*/
  t = (x - X[i-1,1]) / ( X[i,1] - X[i-1,1])

  a =  K[i-1,1]*(X[i,1]-X[i-1,1]) - (Y[i,1]-Y[i-1,1])
  b = -K[i,1]*(X[i,1]-X[i-1,1]) + (Y[i,1]-Y[i-1,1])

  qm = (1-t)*Y[i-1,1] + t*Y[i,1] + t*(1-t)*(a*(1-t)+b*t)

  q = as.scalar(qm)

}

interpSpline = function(double x, matrix[double] X, matrix[double] Y, matrix[double] K) return (double q) {

  /* first find the right knots for interpolation */
  i = as.integer(nrow(X) - sum(ppred(X, x, ">=")) + 1)
  
  /* calc the y as per the algo docs*/
  t = (x - X[i-1,1]) / ( X[i,1] - X[i-1,1])

  a =  K[i-1,1]*(X[i,1]-X[i-1,1]) - (Y[i,1]-Y[i-1,1])
  b = -K[i,1]*(X[i,1]-X[i-1,1]) + (Y[i,1]-Y[i-1,1])

  qm = (1-t)*Y[i-1,1] + t*Y[i,1] + t*(1-t)*(a*(1-t)+b*t)

  q = as.scalar(qm)

}

/* doesn't work need to find out
ERROR => Caused by: com.ibm.bi.dml.lops.LopsException: ERROR: line 50, column 2 -- Parameter min must be a literal for a Rand operation.
	at com.ibm.bi.dml.lops.DataGen.getCPInstruction_SInit(DataGen.java:250)

testSpline = function(double x, string str_xs, string str_ys, int size) return () {

  xs = matrix(str_xs, rows = size, cols = 1)
  ys = matrix(str_xs, rows = size, cols = 1)
  
  ks = calcKnotsDerivKs(xs, ys)

  y = interpSpline(x, xs, ys, ks)

  print("cspline("+x+") => "+ y)

}

l = testSpline(4.5, "1 2 3 4 5 6 7 8 9 10", "1 2 3 4 5 6 7 8 9 10", 10)
*/

/* test1: y = x*/
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "1 2 3 4 5 6 7 8 9 10"
xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = x;
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => 1*(x=" + x + ") = " + exp_y)
print("   cspline(x="+x+") => "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )


/* test2: y = 2x*/
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "2 4 6 8 10 12 14 16 18 20"
xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = 2*x;
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => 2*(x=" + x + ") = " + exp_y)
print("   cspline(x="+x+") => "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )

/* test3: y = x*x  */
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "1 4 9 16 25 36 49 64 81 100"
xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = x*x;
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => square(x=" + x + ") = " + exp_y)
print("   cspline(x="+x+") => "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )


/* test4: y = log(x)  */
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101 2.0794415 2.1972246 2.3025851"

xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = log(x);
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => log(x=" + x + ") = " + exp_y)
print("   cspline(x="+x+") => "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )

/* test5: y = sin(x)  */
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155 0.6569866  0.9893582  0.4121185 -0.5440211"

xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = sin(x);
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => sin(x=" + x + ") = " + exp_y)
print("   cspline(x="+x+") => "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )




/* test6: y = exp(x)  */
str_xs = "1 2 3 4 5 6 7 8 9 10"
str_ys = "2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158 2980.957987 8103.083928 22026.465795"

xs = matrix(str_xs, rows = 10, cols = 1)
ys = matrix(str_ys, rows = 10, cols = 1)
ks = calcKnotsDerivKs(xs, ys)
x = 4.5
y = interpSpline(x, xs, ys, ks)
exp_y = exp(x);
print("{  X=["+str_xs + "]")
print("   Y=["+str_ys + "]")
print("   expected => exp(x=" + x + ") = " + exp_y)
print("   predicted => cspline(x="+x+") = "+ y + "}")
print("   error => (expected-cspline)/expected = " + (exp_y-y)/exp_y )
